(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var canvas = document.createElement("canvas");
var gl = canvas.getContext("webgl");
var findEl = function (x) {
  return document.getElementById(x);
};

function Shader(gl, type, text) {
  var shader = gl.createShader(type);
  var isValid = false;

  gl.shaderSource(shader, text);
  gl.compileShader(shader);

  isValid = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (!isValid) throw new Error("Not valid shader: \n" + text);else return shader;
}

function Program(gl, vs, fs) {
  var _program = gl.createProgram(vs, fs);

  gl.attachShader(_program, vs);
  gl.attachShader(_program, fs);
  gl.linkProgram(_program);
  return _program;
}

//no allocation.  writes data into an allocated Typed Array at given index
function setBox(boxes, index, x, y, w, h) {
  var x1 = x;
  var x2 = x + w;
  var y1 = y;
  var y2 = y + h;

  boxes[index] = x1;
  boxes[index + 1] = y1;
  boxes[index + 2] = x2;
  boxes[index + 3] = y1;
  boxes[index + 4] = x1;
  boxes[index + 5] = y2;

  boxes[index + 6] = x1;
  boxes[index + 7] = y2;
  boxes[index + 8] = x2;
  boxes[index + 9] = y1;
  boxes[index + 10] = x2;
  boxes[index + 11] = y2;
}

//:: glContext, glBuffer, Int, Int, Float32Array
function updateBuffer(gl, buffer, position, chunkSize, data) {
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  gl.enableVertexAttribArray(position);
  gl.vertexAttribPointer(position, chunkSize, gl.FLOAT, false, 0, 0);
}

//a_position vec2

var MAX_BOX_COUNT = 1;
var BOX_POINT_COUNT = 12;
var POINT_DIMENSION = 2;

var vShader = Shader(gl, gl.VERTEX_SHADER, findEl("vertex").text);
var fShader = Shader(gl, gl.FRAGMENT_SHADER, findEl("fragment").text);
var program = Program(gl, vShader, fShader);
var posPtr = gl.getAttribLocation(program, "a_position");
var colorPtr = gl.getUniformLocation(program, "u_color");
var boxBuffer = gl.createBuffer();
var boxes = new Float32Array(MAX_BOX_COUNT * BOX_POINT_COUNT);
var boxColor = [0, 1, 1, 1];

//TODO: presently in clipspace -1 -> 1
setBox(boxes, 0, -1, -1, 2, 2);
gl.useProgram(program);
gl.uniform4f(colorPtr, boxColor[0], boxColor[1], boxColor[2], boxColor[3]);
updateBuffer(gl, boxBuffer, posPtr, POINT_DIMENSION, boxes);
gl.drawArrays(gl.TRIANGLES, 0, 6);

window.gl = gl;
document.body.appendChild(canvas);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
