(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var canvas = document.createElement("canvas");
var gl = canvas.getContext("webgl");
var findEl = function (x) {
  return document.getElementById(x);
};

function Shader(gl, type, text) {
  var shader = gl.createShader(type);
  var isValid = false;

  gl.shaderSource(shader, text);
  gl.compileShader(shader);

  isValid = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (!isValid) throw new Error("Not valid shader: \n" + text);else return shader;
}

function Program(gl, vs, fs) {
  var _program = gl.createProgram(vs, fs);

  gl.attachShader(_program, vs);
  gl.attachShader(_program, fs);
  gl.linkProgram(_program);
  return _program;
}

//no allocation.  writes data into an allocated Typed Array at given index
function setBox(boxes, index, x, y, w, h) {
  var x1 = x;
  var x2 = x + w;
  var y1 = y;
  var y2 = y + h;

  boxes[index] = x1;
  boxes[index + 1] = y1;
  boxes[index + 2] = x2;
  boxes[index + 3] = y1;
  boxes[index + 4] = x1;
  boxes[index + 5] = y2;

  boxes[index + 6] = x1;
  boxes[index + 7] = y2;
  boxes[index + 8] = x2;
  boxes[index + 9] = y1;
  boxes[index + 10] = x2;
  boxes[index + 11] = y2;
}

//:: glContext, glBuffer, Int, Int, Float32Array
function updateBuffer(gl, buffer, position, chunkSize, data) {
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
  gl.enableVertexAttribArray(position);
  gl.vertexAttribPointer(position, chunkSize, gl.FLOAT, false, 0, 0);
}

//a_position vec2

var MAX_BOX_COUNT = 1;
var BOX_POINT_COUNT = 12;
var POINT_DIMENSION = 2;

var vShader = Shader(gl, gl.VERTEX_SHADER, findEl("vertex").text);
var fShader = Shader(gl, gl.FRAGMENT_SHADER, findEl("fragment").text);
var program = Program(gl, vShader, fShader);
var posLocation = gl.getAttribLocation(program, "a_position");
var boxBuffer = gl.createBuffer();
var boxes = new Float32Array(MAX_BOX_COUNT * BOX_POINT_COUNT);

//TODO: presently in clipspace -1 -> 1
setBox(boxes, 0, -1, -1, 2, 2);
gl.useProgram(program);
updateBuffer(gl, boxBuffer, posLocation, POINT_DIMENSION, boxes);
gl.drawArrays(gl.TRIANGLES, 0, 6);

window.gl = gl;
document.body.appendChild(canvas);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvc3RldmVua2FuZS9zaW1wbGVwb25nL3NyYy9kcmF3LXRlc3QuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBLElBQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUE7QUFDN0MsSUFBSSxFQUFFLEdBQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUN2QyxJQUFJLE1BQU0sR0FBRyxVQUFDLENBQUM7U0FBSyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztDQUFBLENBQUE7O0FBRTlDLFNBQVMsTUFBTSxDQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQy9CLE1BQUksTUFBTSxHQUFJLEVBQUUsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDbkMsTUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFBOztBQUVuQixJQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUM3QixJQUFFLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFBOztBQUV4QixTQUFPLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUE7O0FBRTFELE1BQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLENBQUMsQ0FBQSxLQUM3QyxPQUFPLE1BQU0sQ0FBQTtDQUM3Qjs7QUFFRCxTQUFTLE9BQU8sQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRTtBQUM1QixNQUFJLFFBQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTs7QUFFdEMsSUFBRSxDQUFDLFlBQVks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QUFFLENBQUMsWUFBWSxFQUFFLENBQUE7QUFDbkMsSUFBSSxLQUFLLEdBQVMsSUFBSSxZQUFZLENBQUMsYUFBYSxHQUFHLGVBQWUsQ0FBQyxDQUFBOzs7QUFHbkUsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQzlCLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7QUFDdEIsWUFBWSxDQUFDLEVBQUUsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNoRSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBOztBQUVqQyxNQUFNLENBQUMsRUFBRSxHQUFRLEVBQUUsQ0FBQTtBQUNuQixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKVxubGV0IGdsICAgICA9IGNhbnZhcy5nZXRDb250ZXh0KFwid2ViZ2xcIilcbmxldCBmaW5kRWwgPSAoeCkgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoeClcblxuZnVuY3Rpb24gU2hhZGVyIChnbCwgdHlwZSwgdGV4dCkge1xuICBsZXQgc2hhZGVyICA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKVxuICBsZXQgaXNWYWxpZCA9IGZhbHNlXG5cbiAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgdGV4dClcbiAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpXG5cbiAgaXNWYWxpZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKVxuXG4gIGlmICghaXNWYWxpZCkgdGhyb3cgbmV3IEVycm9yKFwiTm90IHZhbGlkIHNoYWRlcjogXFxuXCIgKyB0ZXh0KVxuICBlbHNlICAgICAgICAgICByZXR1cm4gc2hhZGVyXG59XG5cbmZ1bmN0aW9uIFByb2dyYW0gKGdsLCB2cywgZnMpIHtcbiAgbGV0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKHZzLCBmcylcblxuICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdnMpXG4gIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcylcbiAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSlcbiAgcmV0dXJuIHByb2dyYW1cbn1cblxuLy9ubyBhbGxvY2F0aW9uLiAgd3JpdGVzIGRhdGEgaW50byBhbiBhbGxvY2F0ZWQgVHlwZWQgQXJyYXkgYXQgZ2l2ZW4gaW5kZXhcbmZ1bmN0aW9uIHNldEJveCAoYm94ZXMsIGluZGV4LCB4LCB5LCB3LCBoKSB7XG4gIGxldCB4MSA9IHhcbiAgbGV0IHgyID0geCArIHdcbiAgbGV0IHkxID0geVxuICBsZXQgeTIgPSB5ICsgaFxuXG4gIGJveGVzW2luZGV4XSAgICA9IHgxXG4gIGJveGVzW2luZGV4KzFdICA9IHkxXG4gIGJveGVzW2luZGV4KzJdICA9IHgyXG4gIGJveGVzW2luZGV4KzNdICA9IHkxXG4gIGJveGVzW2luZGV4KzRdICA9IHgxXG4gIGJveGVzW2luZGV4KzVdICA9IHkyXG5cbiAgYm94ZXNbaW5kZXgrNl0gID0geDFcbiAgYm94ZXNbaW5kZXgrN10gID0geTJcbiAgYm94ZXNbaW5kZXgrOF0gID0geDJcbiAgYm94ZXNbaW5kZXgrOV0gID0geTFcbiAgYm94ZXNbaW5kZXgrMTBdID0geDJcbiAgYm94ZXNbaW5kZXgrMTFdID0geTJcbn0gXG5cbi8vOjogZ2xDb250ZXh0LCBnbEJ1ZmZlciwgSW50LCBJbnQsIEZsb2F0MzJBcnJheVxuZnVuY3Rpb24gdXBkYXRlQnVmZmVyIChnbCwgYnVmZmVyLCBwb3NpdGlvbiwgY2h1bmtTaXplLCBkYXRhKSB7XG4gIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpXG4gIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBkYXRhLCBnbC5TVEFUSUNfRFJBVylcbiAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkocG9zaXRpb24pXG4gIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIocG9zaXRpb24sIGNodW5rU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKVxufVxuXG4vL2FfcG9zaXRpb24gdmVjMlxuXG5jb25zdCBNQVhfQk9YX0NPVU5UICAgPSAxXG5jb25zdCBCT1hfUE9JTlRfQ09VTlQgPSAxMlxuY29uc3QgUE9JTlRfRElNRU5TSU9OID0gMlxuXG5sZXQgdlNoYWRlciAgICAgPSBTaGFkZXIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIGZpbmRFbChcInZlcnRleFwiKS50ZXh0KVxubGV0IGZTaGFkZXIgICAgID0gU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIGZpbmRFbChcImZyYWdtZW50XCIpLnRleHQpXG5sZXQgcHJvZ3JhbSAgICAgPSBQcm9ncmFtKGdsLCB2U2hhZGVyLCBmU2hhZGVyKVxubGV0IHBvc0xvY2F0aW9uID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgXCJhX3Bvc2l0aW9uXCIpXG5sZXQgYm94QnVmZmVyICAgPSBnbC5jcmVhdGVCdWZmZXIoKVxubGV0IGJveGVzICAgICAgID0gbmV3IEZsb2F0MzJBcnJheShNQVhfQk9YX0NPVU5UICogQk9YX1BPSU5UX0NPVU5UKVxuXG4vL1RPRE86IHByZXNlbnRseSBpbiBjbGlwc3BhY2UgLTEgLT4gMVxuc2V0Qm94KGJveGVzLCAwLCAtMSwgLTEsIDIsIDIpXG5nbC51c2VQcm9ncmFtKHByb2dyYW0pXG51cGRhdGVCdWZmZXIoZ2wsIGJveEJ1ZmZlciwgcG9zTG9jYXRpb24sIFBPSU5UX0RJTUVOU0lPTiwgYm94ZXMpXG5nbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgNilcblxud2luZG93LmdsICAgICAgPSBnbFxuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpXG4iXX0=
