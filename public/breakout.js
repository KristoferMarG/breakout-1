(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function AudioSystem() {
  var _this = this;
  this.actx = new (AudioContext || webkitAudioContext)();
  this.bgGain = this.actx.createGain();
  this.mainGain = this.actx.createGain();

  this.bgGain.connect(this.actx.destination);
  this.mainGain.connect(this.actx.destination);

  this.play = function (buffer, loop) {
    var bs = _this.actx.createBufferSource();

    bs.loop = loop || false;
    bs.buffer = buffer;
    bs.connect(_this.mainGain);
    bs.start(0);
  };

  this.playBackground = function (buffer, loop) {
    var bs = _this.actx.createBufferSource();

    bs.loop = loop || false;
    bs.buffer = buffer;
    bs.connect(_this.bgGain);
    bs.start(0);
  };
}

module.exports = AudioSystem;

},{}],2:[function(require,module,exports){
"use strict";

var _ref = require("./gl-utils");

var clearContext = _ref.clearContext;
var _ref2 = require("./loaders");

var loadSound = _ref2.loadSound;
var loadImage = _ref2.loadImage;
var AudioSystem = require("./audio");

var raf = window.requestAnimationFrame;
var setInterval = window.setInterval;

var audioSystem = new AudioSystem();
var canvas = document.createElement("canvas");
var slider = document.createElement("input");
var button = document.createElement("button");

//perhaps wrap this?
var gl = canvas.getContext("webgl");

var settings = {
  audio: {
    bgVolume: 1,
    mainVolume: 1
  },
  video: {
    resolution: {
      width: 400,
      height: 600
    },
    bgColor: [0.3, 0, 0, 1]
  }
};

var cache = {
  sounds: {},
  sprites: {}
};

//debugging/dev
window.audioSystem = audioSystem;
window.settings = settings;

function makeUpdate() {
  return function update() {
    audioSystem.bgGain.gain.value = settings.audio.bgVolume;
    audioSystem.mainGain.gain.value = settings.audio.mainVolume;
  };
}

function makeRender(gl) {
  return function render() {
    gl.canvas.width = settings.video.resolution.width;
    gl.canvas.height = settings.video.resolution.height;

    clearContext(gl, settings.video.bgColor);
    raf(render);
  };
}

slider.type = "range";
slider.min = 0;
slider.max = 1;
slider.step = 0.1;
slider.value = settings.audio.bgVolume;
document.body.appendChild(slider);
document.body.appendChild(button);
document.body.appendChild(canvas);

slider.addEventListener("change", function (e) {
  console.log(this.value);
  settings.audio.bgVolume = this.value;
});

button.addEventListener("click", function (e) {
  audioSystem.play(cache.hadouken);
});

raf(makeRender(gl));
setInterval(makeUpdate(), 25);

loadSound(audioSystem.actx, "public/sounds/bgm1.mp3", function (err, buffer) {
  cache.bgm1 = buffer;
  audioSystem.playBackground(cache.bgm1, true);
});

loadSound(audioSystem.actx, "public/sounds/hadouken.mp3", function (err, buffer) {
  cache.hadouken = buffer;
});

},{"./audio":1,"./gl-utils":3,"./loaders":4}],3:[function(require,module,exports){
"use strict";

var utils = {};

var clearContext = function (gl, color) {
  if (color) gl.clearColor(color[0], color[1], color[2], color[3]);else gl.clearColor(0, 0, 0, 0);
  gl.clear(gl.COLOR_BUFFER_BIT);
};

var updateBuffer = function (gl, program, chunkSize, attrName, data) {
  var attribute = program.attributes[attrName];
  var buffer = program.buffers[attrName];

  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
  gl.enableVertexAttribArray(attribute);
  gl.vertexAttribPointer(attribute, chunkSize, gl.FLOAT, false, 0, 0);
  return buffer;
};

//given src and type, compile and return shader
function compile(gl, shaderType, src) {
  var shader = gl.createShader(shaderType);

  gl.shaderSource(shader, src);
  gl.compileShader(shader);
  return shader;
}

//link your program w/ opengl
function link(gl, vs, fs) {
  var program = gl.createProgram();

  gl.attachShader(program, vs);
  gl.attachShader(program, fs);
  gl.linkProgram(program);
  return program;
}

/*
 * We want to create a wrapper for a loaded gl program
 * that includes pointers to all the uniforms and attributes
 * defined for this program.  This makes it more convenient
 * to change these values
 */
var LoadedProgram = function (gl, vSrc, fSrc) {
  var vs = compile(gl, gl.VERTEX_SHADER, vSrc);
  var fs = compile(gl, gl.FRAGMENT_SHADER, fSrc);
  var program = link(gl, vs, fs);
  var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
  var lp = {
    vertex: {
      src: vSrc,
      shader: vs
    },
    fragment: {
      src: fSrc,
      shader: fs
    },
    program: program,
    uniforms: {},
    attributes: {},
    buffers: {}
  };
  var aName;
  var uName;

  for (var i = 0; i < numAttributes; ++i) {
    aName = gl.getActiveAttrib(program, i).name;
    lp.attributes[aName] = gl.getAttribLocation(program, aName);
    lp.buffers[aName] = gl.createBuffer();
  }

  for (var j = 0; j < numUniforms; ++j) {
    uName = gl.getActiveUniform(program, j).name;
    lp.uniforms[uName] = gl.getUniformLocation(program, uName);
  }

  return lp;
};

utils.clearContext = clearContext;
utils.updateBuffer = updateBuffer;
utils.LoadedProgram = LoadedProgram;
module.exports = utils;

},{}],4:[function(require,module,exports){
"use strict";

function fetch(type, path, cb) {
  var xhr = new XMLHttpRequest();

  xhr.responseType = type;
  xhr.onload = function () {
    return cb(null, xhr.response);
  };
  xhr.onerror = function () {
    return cb(new Error("Could not load " + path));
  };
  xhr.open("GET", path, true);
  xhr.send(null);
}

function loadImage(path, cb) {
  var i = new Image();

  i.onload = function () {
    return cb(null, i);
  };
  i.onerror = function () {
    return cb(new Error("Could not load " + path));
  };
  i.src = path;
}

function loadSound(audioCtx, path, cb) {
  fetch("arraybuffer", path, function (err, binary) {
    if (err) return cb(err);

    var decodeSuccess = function (buffer) {
      return cb(null, buffer);
    };
    var decodeFailure = cb;

    audioCtx.decodeAudioData(binary, decodeSuccess, decodeFailure);
  });
}

module.exports.loadImage = loadImage;
module.exports.loadSound = loadSound;
module.exports.fetch = fetch;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
