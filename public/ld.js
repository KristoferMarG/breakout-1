(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function Loader() {
  var _this = this;
  var audioCtx = new AudioContext();

  var loadXHR = function (type) {
    return function (path, cb) {
      if (!path) return cb(new Error("No path provided"));

      var xhr = new XMLHttpRequest();

      xhr.responseType = type;
      xhr.onload = function () {
        return cb(null, xhr.response);
      };
      xhr.onerror = function () {
        return cb(new Error("Could not load " + path));
      };
      xhr.open("GET", path, true);
      xhr.send(null);
    };
  };

  var loadBuffer = loadXHR("arraybuffer");
  var loadString = loadXHR("string");

  this.loadShader = loadString;

  this.loadTexture = function (path, cb) {
    var i = new Image();
    var onload = function () {
      return cb(null, i);
    };
    var onerror = function () {
      return cb(new Error("Could not load " + path));
    };

    i.onload = onload;
    i.onerror = onerror;
    i.src = path;
  };

  this.loadSound = function (path, cb) {
    loadBuffer(path, function (err, binary) {
      var decodeSuccess = function (buffer) {
        return cb(null, buffer);
      };
      var decodeFailure = cb;

      audioCtx.decodeAudioData(binary, decodeSuccess, decodeFailure);
    });
  };

  this.loadAssets = function (_ref, cb) {
    var sounds = _ref.sounds;
    var textures = _ref.textures;
    var shaders = _ref.shaders;
    var soundKeys = Object.keys(sounds);
    var textureKeys = Object.keys(textures);
    var shaderKeys = Object.keys(shaders);
    var soundCount = soundKeys.length;
    var textureCount = textureKeys.length;
    var shaderCount = shaderKeys.length;
    var i = -1;
    var j = -1;
    var k = -1;
    var out = {
      sounds: {}, textures: {}, shaders: {}
    };

    var checkDone = function () {
      if (soundCount <= 0 && textureCount <= 0 && shaderCount <= 0) cb(null, out);
    };

    var registerSound = function (name, data) {
      soundCount--;
      out.sounds[name] = data;
      checkDone();
    };

    var registerTexture = function (name, data) {
      textureCount--;
      out.textures[name] = data;
      checkDone();
    };

    var registerShader = function (name, data) {
      shaderCount--;
      out.shaders[name] = data;
      checkDone();
    };

    while (soundKeys[++i]) {
      (function () {
        var key = soundKeys[i];

        _this.loadSound(sounds[key], function (err, data) {
          registerSound(key, data);
        });
      })();
    }
    while (textureKeys[++j]) {
      (function () {
        var key = textureKeys[j];

        _this.loadTexture(textures[key], function (err, data) {
          registerTexture(key, data);
        });
      })();
    }
    while (shaderKeys[++k]) {
      (function () {
        var key = shaderKeys[k];

        _this.loadShader(shaders[key], function (err, data) {
          registerShader(key, data);
        });
      })();
    }
  };
}

module.exports = Loader;

},{}],2:[function(require,module,exports){
"use strict";

var canvas = document.createElement("canvas");
var gl = canvas.getContext("webgl");
var vertexSrc = document.getElementById("vertex").text;
var fragSrc = document.getElementById("fragment").text;
var Loader = require("./Loader");
var assets = {
  textures: {
    maptiles: "/public/spritesheets/maptiles.png",
    paddle: "/public/spritesheets/paddle.png"
  },
  sounds: {},
  shaders: {}
};

var POINT_DIMENSION = 2;
var POINTS_PER_BOX = 6;
var BOX_LENGTH = POINT_DIMENSION * POINTS_PER_BOX;

var maxFromWidth = function (ratio, width) {
  return width / ratio;
};
var maxFromHeight = function (ratio, height) {
  return height * ratio;
};

//:: => GLContext -> DOMElement -> World
function resizeView(gl, target, world) {
  var _canvas = gl.canvas;
  var ratio = world.ratio;
  var maxWidth = target.innerWidth;
  var maxHeight = target.innerHeight;
  var targetRatio = maxWidth / maxHeight;
  var useWidth = ratio >= targetRatio;
  var w = useWidth ? maxWidth : maxFromHeight(ratio, maxHeight);
  var h = useWidth ? maxFromWidth(ratio, maxWidth) : maxHeight;

  _canvas.width = w;
  _canvas.height = h;
  gl.viewport(0, 0, _canvas.width, _canvas.height);
}

//:: => GLContext -> ENUM (VERTEX || FRAGMENT) -> String (Code)
function Shader(gl, type, src) {
  var shader = gl.createShader(type);
  var isValid = false;

  gl.shaderSource(shader, src);
  gl.compileShader(shader);

  isValid = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (!isValid) throw new Error("Not valid shader: \n" + src);
  return shader;
}

//:: => GLContext -> VertexShader -> FragmentShader
function Program(gl, vs, fs) {
  var _program = gl.createProgram(vs, fs);

  gl.attachShader(_program, vs);
  gl.attachShader(_program, fs);
  gl.linkProgram(_program);
  return _program;
}

//:: => GLContext -> Buffer
function Buffer(gl) {
  return gl.createBuffer();
}

//:: => GLContext -> Image -> Texture
function Texture(gl, image) {
  var texture = gl.createTexture();

  gl.activeTexture(gl.TEXTURE0);
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
  //(target, level, internalformat, width, height, border, format, type, pixels);
  return texture;
}

//:: => Int -> Int
function World(width, height) {
  return {
    ratio: width / height,
    width: width,
    height: height
  };
}

//Coordinate system for webGL is clipspace which is -1 -> 1 on both x and y
//  Point(-1, -1), Point(1, -1), Point(-1, 1)
//express the data above on a single array
//  [-1.0, -1.0, 1.0, -1.0, -1.0, 1.0] -- standard JS Array  -- create with new Array(SIZE)
//express as Float32Array
//  new Float32Array([-1.0, -1.0, 1.0, -1.0, -1.0, 1.0])

//:: => GLContext -> Buffer -> Int -> Int -> Float32Array
function updateBuffer(gl, buffer, loc, chunkSize, data) {
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
  gl.bufferData(gl.ARRAY_BUFFER, data, gl.DYNAMIC_DRAW);
  gl.enableVertexAttribArray(loc);
  gl.vertexAttribPointer(loc, chunkSize, gl.FLOAT, false, 0, 0);
}

function setBox(boxArray, index, x, y, w, h) {
  var i = BOX_LENGTH * index;
  var x1 = x;
  var y1 = y;
  var x2 = x + w;
  var y2 = y + h;

  boxArray[i] = x1;
  boxArray[i + 1] = y1;
  boxArray[i + 2] = x2;
  boxArray[i + 3] = y1;
  boxArray[i + 4] = x1;
  boxArray[i + 5] = y2;

  boxArray[i + 6] = x1;
  boxArray[i + 7] = y2;
  boxArray[i + 8] = x2;
  boxArray[i + 9] = y1;
  boxArray[i + 10] = x2;
  boxArray[i + 11] = y2;
}

function TextureArray(size) {
  var textureSize = 12;
  var _texArray = new Float32Array(size * textureSize);

  for (var i = 0, len = _texArray.length; i < len; i += textureSize) {
    _texArray[i] = 0;
    _texArray[i + 1] = 0;
    _texArray[i + 2] = 1;
    _texArray[i + 3] = 0;
    _texArray[i + 4] = 0;
    _texArray[i + 5] = 1;

    _texArray[i + 6] = 0;
    _texArray[i + 7] = 1;
    _texArray[i + 8] = 1;
    _texArray[i + 9] = 0;
    _texArray[i + 10] = 1;
    _texArray[i + 11] = 1;
  }
  return _texArray;
}

var BOX_COUNT = 10;
var activeBoxes = 2;
var vs = Shader(gl, gl.VERTEX_SHADER, vertexSrc);
var fs = Shader(gl, gl.FRAGMENT_SHADER, fragSrc);
var program = Program(gl, vs, fs);
var posBuffer = Buffer(gl);
var texBuffer = Buffer(gl);
var boxes = new Float32Array(BOX_COUNT * BOX_LENGTH);
var texArray = TextureArray(BOX_COUNT);
var posLocation = gl.getAttribLocation(program, "a_position");
var texLocation = gl.getAttribLocation(program, "a_texCoord");
var worldSizeLocation = gl.getUniformLocation(program, "u_worldSize");
var imageLocation = gl.getUniformLocation(program, "u_image");
var world = World(1920, 1080);
var loader = new Loader();
var paddleImage;
var paddleTexture;

window.texArray = texArray;
window.boxes = boxes;


setBox(boxes, 0, 800, 800, 112, 25);
setBox(boxes, 1, 400, 400, 112, 25);

function makeAnimate(stuff) {
  gl.enable(gl.BLEND);
  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
  gl.useProgram(program);
  gl.activeTexture(gl.TEXTURE0);
  gl.uniform2f(worldSizeLocation, world.width, world.height);
  gl.uniform1i(imageLocation, 0);
  gl.bindTexture(gl.TEXTURE_2D, paddleTexture);
  updateBuffer(gl, texBuffer, texLocation, POINT_DIMENSION, texArray);

  return function animate() {
    gl.clearColor(1, 1, 1, 0);
    gl.colorMask(true, true, true, true);
    gl.clear(gl.COLOR_BUFFER_BIT);
    updateBuffer(gl, posBuffer, posLocation, POINT_DIMENSION, boxes);
    gl.drawArrays(gl.TRIANGLES, 0, activeBoxes * POINTS_PER_BOX);
    requestAnimationFrame(animate);
  };
}

document.addEventListener("DOMContentLoaded", function () {
  loader.loadAssets(assets, function (err, results) {
    paddleImage = results.textures.paddle;
    paddleTexture = Texture(gl, paddleImage);

    document.body.appendChild(canvas);
    resizeView(gl, window, world);
    requestAnimationFrame(makeAnimate());
    window.addEventListener("resize", function (_ref) {
      var target = _ref.target;
      resizeView(gl, target, world);
    });
  });
});

},{"./Loader":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,
